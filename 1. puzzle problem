import heapq

class Puzzle:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.empty_tile = self.find_empty_tile()
        
    def find_empty_tile(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j
                    
    def is_goal(self):
        goal = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        return self.board == goal

    def neighbors(self):
        i, j = self.empty_tile
        possible_moves = []
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        
        for di, dj in directions:
            new_i, new_j = i + di, j + dj
            if 0 <= new_i < 3 and 0 <= new_j < 3:
                new_board = [row[:] for row in self.board]
                new_board[i][j], new_board[new_i][new_j] = new_board[new_i][new_j], new_board[i][j]
                possible_moves.append(Puzzle(new_board, self.moves + 1, self))
                
        return possible_moves

    def manhattan_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    value = self.board[i][j]
                    target_x, target_y = (value - 1) // 3, (value - 1) % 3
                    distance += abs(i - target_x) + abs(j - target_y)
        return distance

    def __lt__(self, other):
        return (self.moves + self.manhattan_distance()) < (other.moves + other.manhattan_distance())

def a_star_solver(initial_board):
    start_puzzle = Puzzle(initial_board)
    priority_queue = []
    heapq.heappush(priority_queue, (start_puzzle.manhattan_distance(), start_puzzle))
    visited = set()
    visited.add(str(start_puzzle.board))

    while priority_queue:
        _, current_puzzle = heapq.heappop(priority_queue)

        if current_puzzle.is_goal():
            solution_path = []
            while current_puzzle:
                solution_path.append(current_puzzle.board)
                current_puzzle = current_puzzle.previous
            return solution_path[::-1]
        
        for neighbor in current_puzzle.neighbors():
            if str(neighbor.board) not in visited:
                visited.add(str(neighbor.board))
                heapq.heappush(priority_queue, (neighbor.moves + neighbor.manhattan_distance(), neighbor))

    return None

def print_solution(solution):
    if solution:
        print("Solution found in {} moves:".format(len(solution) - 1))
        for step in solution:
            for row in step:
                print(row)
            print()
    else:
        print("No solution found.")
initial_board = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]
solution = a_star_solver(initial_board)
print_solution(solution)
